{"ast":null,"code":"var _jsxFileName = \"/home/kaldheim/django_ci_cd/frontend/src/components/Pipeline.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background, addEdge, useNodesState, useEdgesState } from 'reactflow';\nimport 'reactflow/dist/style.css';\n\n// Исходные данные\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: '1',\n  type: 'input',\n  data: {\n    label: 'Build'\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  status: 'Pending'\n}, {\n  id: '2',\n  data: {\n    label: 'Test'\n  },\n  position: {\n    x: 100,\n    y: 150\n  },\n  status: 'Pending'\n}, {\n  id: '3',\n  data: {\n    label: 'Deploy'\n  },\n  position: {\n    x: 400,\n    y: 150\n  },\n  status: 'Pending'\n}];\nconst initialEdges = [{\n  id: 'e1-2',\n  source: '1',\n  target: '2',\n  animated: true\n}, {\n  id: 'e1-3',\n  source: '1',\n  target: '3',\n  animated: true\n}];\nconst statusColors = {\n  Pending: '#f0ad4e',\n  // Оранжевый\n  Running: '#5bc0de',\n  // Голубой\n  Completed: '#5cb85c',\n  // Зеленый\n  Failed: '#d9534f' // Красный\n};\nconst Pipeline = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [logs, setLogs] = useState([]);\n  const [newTaskName, setNewTaskName] = useState('');\n  const [taskDetails, setTaskDetails] = useState(null);\n  const [filteredLogs, setFilteredLogs] = useState(logs);\n  const logTypes = ['info', 'warning', 'error'];\n\n  // Обновление статуса задачи\n  const updateNodeStatus = (nodeId, status) => {\n    setNodes(nds => nds.map(node => {\n      if (node.id === nodeId) {\n        const now = new Date().toLocaleTimeString(); // Текущее время\n        return {\n          ...node,\n          status,\n          data: {\n            ...node.data,\n            ...(status === 'Running' && {\n              startTime: now\n            }),\n            // Устанавливаем время начала\n            ...(status === 'Completed' && {\n              endTime: now\n            }) // Устанавливаем время завершения\n          },\n          style: {\n            background: statusColors[status],\n            color: '#fff'\n          } // Обновляем стиль\n        };\n      }\n      return node;\n    }));\n    setLogs(prevLogs => [...prevLogs, `Task ${nodeId} status updated to ${status} ${status === 'Running' ? '(started at ' + new Date().toLocaleTimeString() + ')' : ''}`]);\n  };\n\n  // Запуск пайплайна\n  const runPipeline = () => {\n    // Обновляем статус задачи Build\n    updateNodeStatus('1', 'Running');\n\n    // После 2 секунд обновляем статус Build на Completed и начинаем Test\n    setTimeout(() => {\n      updateNodeStatus('1', 'Completed');\n      updateNodeStatus('2', 'Running');\n    }, 2000);\n\n    // После 4 секунд обновляем статус Test на Completed и начинаем Deploy\n    setTimeout(() => {\n      updateNodeStatus('2', 'Completed');\n      updateNodeStatus('3', 'Running');\n    }, 4000);\n\n    // После 6 секунд обновляем статус Deploy на Completed\n    setTimeout(() => {\n      updateNodeStatus('3', 'Completed');\n    }, 6000);\n  };\n\n  // Функция остановки всех задач\n  const stopPipeline = () => {\n    setNodes(nds => nds.map(node => ({\n      ...node,\n      status: 'Failed',\n      style: {\n        background: statusColors['Failed'],\n        color: '#fff'\n      }\n    })));\n    setLogs(prevLogs => [...prevLogs, {\n      type: 'warning',\n      message: 'Pipeline stopped manually'\n    }]);\n  };\n  const restartPipeline = () => {\n    setNodes(nds => nds.map(node => ({\n      ...node,\n      status: 'Pending',\n      style: {\n        background: statusColors['Pending'],\n        color: '#fff'\n      }\n    })));\n    runPipeline();\n  };\n\n  // Добавление новой задачи\n  const addNode = label => {\n    if (!label) return;\n\n    // Определяем новый ID для узла\n    const newNodeId = (nodes.length + 1).toString();\n\n    // Создаем новый узел\n    const newNode = {\n      id: newNodeId,\n      data: {\n        label\n      },\n      position: {\n        x: Math.random() * 600,\n        y: Math.random() * 400\n      },\n      status: 'Pending',\n      // Статус Pending при добавлении\n      style: {\n        background: statusColors['Pending'],\n        color: '#fff'\n      } // Цвет по статусу\n    };\n\n    // Если это не первая задача, добавляем соединение с предыдущей\n    if (nodes.length > 0) {\n      const lastNodeId = nodes[nodes.length - 1].id; // ID последней задачи\n      const newEdge = {\n        id: `e${lastNodeId}-${newNodeId}`,\n        // Уникальный ID для ребра\n        source: lastNodeId,\n        // Источник (последний узел)\n        target: newNodeId,\n        // Цель (новый узел)\n        animated: true // Анимация для рёбер\n      };\n      setEdges(eds => [...eds, newEdge]); // Добавляем новое ребро в список рёбер\n    }\n\n    // Добавляем новый узел в состояние\n    setNodes(nds => [...nds, newNode]);\n    setLogs(prevLogs => [...prevLogs, `Added new task: ${label}`]);\n    setNewTaskName(''); // Очистить поле ввода\n  };\n  const filterLogs = type => {\n    setFilteredLogs(logs.filter(log => log.type === type));\n  };\n  const onNodeClick = (event, node) => {\n    setTaskDetails(node);\n  };\n\n  // Обработчик соединения узлов\n  const onConnect = params => {\n    setEdges(eds => addEdge(params, eds));\n    setLogs(prevLogs => [...prevLogs, {\n      type: 'info',\n      message: `Connected ${params.source} -> ${params.target}`\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: '#2a2f23',\n      minHeight: '100vh',\n      padding: '20px',\n      color: '#c3e88d'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: 'center',\n        color: '#9ccc65'\n      },\n      children: \"CI/CD Pipeline\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: runPipeline,\n        style: {\n          margin: '5px',\n          padding: '10px',\n          backgroundColor: '#5cb85c',\n          color: '#fff'\n        },\n        children: \"Run\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopPipeline,\n        style: {\n          margin: '5px',\n          padding: '10px',\n          backgroundColor: '#d9534f',\n          color: '#fff'\n        },\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: restartPipeline,\n        style: {\n          margin: '5px',\n          padding: '10px',\n          backgroundColor: '#5bc0de',\n          color: '#fff'\n        },\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Task Name\",\n        value: newTaskName,\n        onChange: e => setNewTaskName(e.target.value),\n        style: {\n          padding: '5px',\n          marginRight: '10px',\n          border: '1px solid #9ccc65',\n          backgroundColor: '#394a34',\n          color: '#c3e88d'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addNode(newTaskName),\n        style: {\n          padding: '5px 10px',\n          backgroundColor: '#9ccc65',\n          color: '#2a2f23',\n          border: 'none',\n          borderRadius: '5px',\n          cursor: 'pointer'\n        },\n        children: \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '400px',\n        width: '800px',\n        border: '1px solid #9ccc65',\n        margin: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onNodeClick: onNodeClick,\n        onConnect: onConnect // Обработчик соединений\n        ,\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {\n          color: \"#555\",\n          gap: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), taskDetails && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        margin: '20px auto',\n        border: '1px solid #9ccc65',\n        backgroundColor: '#394a34',\n        width: '800px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Task Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 8\n        }, this), \" \", taskDetails.data.label]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Status:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 8\n        }, this), \" \", taskDetails.status]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Start Time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 8\n        }, this), \" \", taskDetails.data.startTime || 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"End Time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 8\n        }, this), \" \", taskDetails.data.endTime || 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        margin: '20px auto',\n        border: '1px solid #9ccc65',\n        backgroundColor: '#394a34',\n        width: '800px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Logs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: logTypes.map(type => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => filterLogs(type),\n          style: {\n            margin: '5px',\n            padding: '5px',\n            backgroundColor: '#9ccc65',\n            color: '#2a2f23'\n          },\n          children: type\n        }, type, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          maxHeight: '150px',\n          overflowY: 'auto'\n        },\n        children: filteredLogs.map((log, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            margin: '5px 0'\n          },\n          children: [\"[\", log.type.toUpperCase(), \"] \", log.message]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n_s(Pipeline, \"O59CKUaUi7QHOo+E+jsWLERC9/M=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = Pipeline;\nexport default Pipeline;\nvar _c;\n$RefreshReg$(_c, \"Pipeline\");","map":{"version":3,"names":["React","useState","ReactFlow","MiniMap","Controls","Background","addEdge","useNodesState","useEdgesState","jsxDEV","_jsxDEV","initialNodes","id","type","data","label","position","x","y","status","initialEdges","source","target","animated","statusColors","Pending","Running","Completed","Failed","Pipeline","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","logs","setLogs","newTaskName","setNewTaskName","taskDetails","setTaskDetails","filteredLogs","setFilteredLogs","logTypes","updateNodeStatus","nodeId","nds","map","node","now","Date","toLocaleTimeString","startTime","endTime","style","background","color","prevLogs","runPipeline","setTimeout","stopPipeline","message","restartPipeline","addNode","newNodeId","length","toString","newNode","Math","random","lastNodeId","newEdge","eds","filterLogs","filter","log","onNodeClick","event","onConnect","params","backgroundColor","minHeight","padding","children","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","onClick","margin","placeholder","value","onChange","e","marginRight","border","borderRadius","cursor","height","width","fitView","gap","maxHeight","overflowY","index","toUpperCase","_c","$RefreshReg$"],"sources":["/home/kaldheim/django_ci_cd/frontend/src/components/Pipeline.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  addEdge,\n  useNodesState,\n  useEdgesState,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\n\n// Исходные данные\nconst initialNodes = [\n  { id: '1', type: 'input', data: { label: 'Build' }, position: { x: 250, y: 0 }, status: 'Pending' },\n  { id: '2', data: { label: 'Test' }, position: { x: 100, y: 150 }, status: 'Pending' },\n  { id: '3', data: { label: 'Deploy' }, position: { x: 400, y: 150 }, status: 'Pending' },\n];\n\nconst initialEdges = [\n  { id: 'e1-2', source: '1', target: '2', animated: true },\n  { id: 'e1-3', source: '1', target: '3', animated: true },\n];\n\nconst statusColors = {\n  Pending: '#f0ad4e',    // Оранжевый\n  Running: '#5bc0de',    // Голубой\n  Completed: '#5cb85c',  // Зеленый\n  Failed: '#d9534f',     // Красный\n};\n\nconst Pipeline = () => {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [logs, setLogs] = useState([]);\n  const [newTaskName, setNewTaskName] = useState('');\n  const [taskDetails, setTaskDetails] = useState(null);\n  const [filteredLogs, setFilteredLogs] = useState(logs);\n\n  const logTypes = ['info', 'warning', 'error'];\n\n  // Обновление статуса задачи\n  const updateNodeStatus = (nodeId, status) => {\n    setNodes((nds) =>\n      nds.map((node) => {\n        if (node.id === nodeId) {\n          const now = new Date().toLocaleTimeString(); // Текущее время\n          return {\n            ...node,\n            status,\n            data: {\n              ...node.data,\n              ...(status === 'Running' && { startTime: now }), // Устанавливаем время начала\n              ...(status === 'Completed' && { endTime: now }), // Устанавливаем время завершения\n            },\n            style: { background: statusColors[status], color: '#fff' }, // Обновляем стиль\n          };\n        }\n        return node;\n      })\n    );\n  \n    setLogs((prevLogs) => [\n      ...prevLogs,\n      `Task ${nodeId} status updated to ${status} ${status === 'Running' ? '(started at ' + new Date().toLocaleTimeString() + ')' : ''}`,\n    ]);\n  };\n  \n\n  // Запуск пайплайна\n  const runPipeline = () => {\n    // Обновляем статус задачи Build\n    updateNodeStatus('1', 'Running');\n    \n    // После 2 секунд обновляем статус Build на Completed и начинаем Test\n    setTimeout(() => {\n      updateNodeStatus('1', 'Completed');\n      updateNodeStatus('2', 'Running');\n    }, 2000);\n    \n    // После 4 секунд обновляем статус Test на Completed и начинаем Deploy\n    setTimeout(() => {\n      updateNodeStatus('2', 'Completed');\n      updateNodeStatus('3', 'Running');\n    }, 4000);\n    \n    // После 6 секунд обновляем статус Deploy на Completed\n    setTimeout(() => {\n      updateNodeStatus('3', 'Completed');\n    }, 6000);\n  };\n  \n\n  // Функция остановки всех задач\n  const stopPipeline = () => {\n    setNodes((nds) =>\n      nds.map((node) => ({\n        ...node,\n        status: 'Failed',\n        style: { background: statusColors['Failed'], color: '#fff' },\n      }))\n    );\n    setLogs((prevLogs) => [...prevLogs, { type: 'warning', message: 'Pipeline stopped manually' }]);\n  };\n\n  const restartPipeline = () => {\n    setNodes((nds) =>\n      nds.map((node) => ({\n        ...node,\n        status: 'Pending',\n        style: { background: statusColors['Pending'], color: '#fff' },\n      }))\n    );\n    runPipeline();\n  };\n\n  // Добавление новой задачи\n  const addNode = (label) => {\n    if (!label) return;\n  \n    // Определяем новый ID для узла\n    const newNodeId = (nodes.length + 1).toString();\n    \n    // Создаем новый узел\n    const newNode = {\n      id: newNodeId,\n      data: { label },\n      position: { x: Math.random() * 600, y: Math.random() * 400 },\n      status: 'Pending',  // Статус Pending при добавлении\n      style: { background: statusColors['Pending'], color: '#fff' },  // Цвет по статусу\n    };\n  \n    // Если это не первая задача, добавляем соединение с предыдущей\n    if (nodes.length > 0) {\n      const lastNodeId = nodes[nodes.length - 1].id;  // ID последней задачи\n      const newEdge = {\n        id: `e${lastNodeId}-${newNodeId}`,  // Уникальный ID для ребра\n        source: lastNodeId,  // Источник (последний узел)\n        target: newNodeId,   // Цель (новый узел)\n        animated: true,      // Анимация для рёбер\n      };\n      setEdges((eds) => [...eds, newEdge]);  // Добавляем новое ребро в список рёбер\n    }\n  \n    // Добавляем новый узел в состояние\n    setNodes((nds) => [...nds, newNode]);\n    setLogs((prevLogs) => [...prevLogs, `Added new task: ${label}`]);\n    setNewTaskName(''); // Очистить поле ввода\n  };\n  \n\n\n  const filterLogs = (type) => {\n    setFilteredLogs(logs.filter((log) => log.type === type));\n  };\n\n  const onNodeClick = (event, node) => {\n    setTaskDetails(node);\n  };\n\n  // Обработчик соединения узлов\n  const onConnect = (params) => {\n    setEdges((eds) => addEdge(params, eds));\n    setLogs((prevLogs) => [\n      ...prevLogs,\n      { type: 'info', message: `Connected ${params.source} -> ${params.target}` },\n    ]);\n  };\n\n  return (\n    <div style={{ backgroundColor: '#2a2f23', minHeight: '100vh', padding: '20px', color: '#c3e88d' }}>\n      <h2 style={{ textAlign: 'center', color: '#9ccc65' }}>CI/CD Pipeline</h2>\n\n      <div style={{ textAlign: 'center', marginBottom: '20px' }}>\n        <button onClick={runPipeline} style={{ margin: '5px', padding: '10px', backgroundColor: '#5cb85c', color: '#fff' }}>Run</button>\n        <button onClick={stopPipeline} style={{ margin: '5px', padding: '10px', backgroundColor: '#d9534f', color: '#fff' }}>Stop</button>\n        <button onClick={restartPipeline} style={{ margin: '5px', padding: '10px', backgroundColor: '#5bc0de', color: '#fff' }}>Restart</button>\n      </div>\n\n      {/* Добавление новой задачи */}\n      <div style={{ textAlign: 'center', marginBottom: '20px' }}>\n        <input\n          type=\"text\"\n          placeholder=\"Task Name\"\n          value={newTaskName}\n          onChange={(e) => setNewTaskName(e.target.value)}\n          style={{\n            padding: '5px',\n            marginRight: '10px',\n            border: '1px solid #9ccc65',\n            backgroundColor: '#394a34',\n            color: '#c3e88d',\n          }}\n        />\n        <button\n          onClick={() => addNode(newTaskName)}\n          style={{\n            padding: '5px 10px',\n            backgroundColor: '#9ccc65',\n            color: '#2a2f23',\n            border: 'none',\n            borderRadius: '5px',\n            cursor: 'pointer',\n          }}\n        >\n          Add Task\n        </button>\n      </div>\n\n      <div style={{ height: '400px', width: '800px', border: '1px solid #9ccc65', margin: 'auto' }}>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onNodeClick={onNodeClick}\n          onConnect={onConnect}  // Обработчик соединений\n          fitView\n        >\n          <MiniMap />\n          <Controls />\n          <Background color=\"#555\" gap={16} />\n        </ReactFlow>\n      </div>\n\n      {/* Детали задачи */}\n      {taskDetails && (\n  <div style={{ padding: '20px', margin: '20px auto', border: '1px solid #9ccc65', backgroundColor: '#394a34', width: '800px' }}>\n    <h4>Task Details</h4>\n    <p><strong>Name:</strong> {taskDetails.data.label}</p>\n    <p><strong>Status:</strong> {taskDetails.status}</p>\n    <p><strong>Start Time:</strong> {taskDetails.data.startTime || 'N/A'}</p>\n    <p><strong>End Time:</strong> {taskDetails.data.endTime || 'N/A'}</p>\n  </div>\n)}\n\n\n      {/* Логи с фильтрацией */}\n      <div style={{ padding: '20px', margin: '20px auto', border: '1px solid #9ccc65', backgroundColor: '#394a34', width: '800px' }}>\n        <h4>Logs</h4>\n        <div>\n          {logTypes.map((type) => (\n            <button key={type} onClick={() => filterLogs(type)} style={{ margin: '5px', padding: '5px', backgroundColor: '#9ccc65', color: '#2a2f23' }}>\n              {type}\n            </button>\n          ))}\n        </div>\n        <div style={{ maxHeight: '150px', overflowY: 'auto' }}>\n          {filteredLogs.map((log, index) => (\n            <p key={index} style={{ margin: '5px 0' }}>\n              [{log.type.toUpperCase()}] {log.message}\n            </p>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Pipeline;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,IACdC,OAAO,EACPC,QAAQ,EACRC,UAAU,EACVC,OAAO,EACPC,aAAa,EACbC,aAAa,QACR,WAAW;AAClB,OAAO,0BAA0B;;AAEjC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAG,CACnB;EAAEC,EAAE,EAAE,GAAG;EAAEC,IAAI,EAAE,OAAO;EAAEC,IAAI,EAAE;IAAEC,KAAK,EAAE;EAAQ,CAAC;EAAEC,QAAQ,EAAE;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAE,CAAC;EAAEC,MAAM,EAAE;AAAU,CAAC,EACnG;EAAEP,EAAE,EAAE,GAAG;EAAEE,IAAI,EAAE;IAAEC,KAAK,EAAE;EAAO,CAAC;EAAEC,QAAQ,EAAE;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAI,CAAC;EAAEC,MAAM,EAAE;AAAU,CAAC,EACrF;EAAEP,EAAE,EAAE,GAAG;EAAEE,IAAI,EAAE;IAAEC,KAAK,EAAE;EAAS,CAAC;EAAEC,QAAQ,EAAE;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAI,CAAC;EAAEC,MAAM,EAAE;AAAU,CAAC,CACxF;AAED,MAAMC,YAAY,GAAG,CACnB;EAAER,EAAE,EAAE,MAAM;EAAES,MAAM,EAAE,GAAG;EAAEC,MAAM,EAAE,GAAG;EAAEC,QAAQ,EAAE;AAAK,CAAC,EACxD;EAAEX,EAAE,EAAE,MAAM;EAAES,MAAM,EAAE,GAAG;EAAEC,MAAM,EAAE,GAAG;EAAEC,QAAQ,EAAE;AAAK,CAAC,CACzD;AAED,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,SAAS;EAAK;EACvBC,OAAO,EAAE,SAAS;EAAK;EACvBC,SAAS,EAAE,SAAS;EAAG;EACvBC,MAAM,EAAE,SAAS,CAAM;AACzB,CAAC;AAED,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAG1B,aAAa,CAACI,YAAY,CAAC;EACpE,MAAM,CAACuB,KAAK,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAG5B,aAAa,CAACY,YAAY,CAAC;EACpE,MAAM,CAACiB,IAAI,EAAEC,OAAO,CAAC,GAAGrC,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACsC,WAAW,EAAEC,cAAc,CAAC,GAAGvC,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACwC,WAAW,EAAEC,cAAc,CAAC,GAAGzC,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAAC0C,YAAY,EAAEC,eAAe,CAAC,GAAG3C,QAAQ,CAACoC,IAAI,CAAC;EAEtD,MAAMQ,QAAQ,GAAG,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC;;EAE7C;EACA,MAAMC,gBAAgB,GAAGA,CAACC,MAAM,EAAE5B,MAAM,KAAK;IAC3Ca,QAAQ,CAAEgB,GAAG,IACXA,GAAG,CAACC,GAAG,CAAEC,IAAI,IAAK;MAChB,IAAIA,IAAI,CAACtC,EAAE,KAAKmC,MAAM,EAAE;QACtB,MAAMI,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC,CAAC,CAAC;QAC7C,OAAO;UACL,GAAGH,IAAI;UACP/B,MAAM;UACNL,IAAI,EAAE;YACJ,GAAGoC,IAAI,CAACpC,IAAI;YACZ,IAAIK,MAAM,KAAK,SAAS,IAAI;cAAEmC,SAAS,EAAEH;YAAI,CAAC,CAAC;YAAE;YACjD,IAAIhC,MAAM,KAAK,WAAW,IAAI;cAAEoC,OAAO,EAAEJ;YAAI,CAAC,CAAC,CAAE;UACnD,CAAC;UACDK,KAAK,EAAE;YAAEC,UAAU,EAAEjC,YAAY,CAACL,MAAM,CAAC;YAAEuC,KAAK,EAAE;UAAO,CAAC,CAAE;QAC9D,CAAC;MACH;MACA,OAAOR,IAAI;IACb,CAAC,CACH,CAAC;IAEDZ,OAAO,CAAEqB,QAAQ,IAAK,CACpB,GAAGA,QAAQ,EACX,QAAQZ,MAAM,sBAAsB5B,MAAM,IAAIA,MAAM,KAAK,SAAS,GAAG,cAAc,GAAG,IAAIiC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,CACnI,CAAC;EACJ,CAAC;;EAGD;EACA,MAAMO,WAAW,GAAGA,CAAA,KAAM;IACxB;IACAd,gBAAgB,CAAC,GAAG,EAAE,SAAS,CAAC;;IAEhC;IACAe,UAAU,CAAC,MAAM;MACff,gBAAgB,CAAC,GAAG,EAAE,WAAW,CAAC;MAClCA,gBAAgB,CAAC,GAAG,EAAE,SAAS,CAAC;IAClC,CAAC,EAAE,IAAI,CAAC;;IAER;IACAe,UAAU,CAAC,MAAM;MACff,gBAAgB,CAAC,GAAG,EAAE,WAAW,CAAC;MAClCA,gBAAgB,CAAC,GAAG,EAAE,SAAS,CAAC;IAClC,CAAC,EAAE,IAAI,CAAC;;IAER;IACAe,UAAU,CAAC,MAAM;MACff,gBAAgB,CAAC,GAAG,EAAE,WAAW,CAAC;IACpC,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;;EAGD;EACA,MAAMgB,YAAY,GAAGA,CAAA,KAAM;IACzB9B,QAAQ,CAAEgB,GAAG,IACXA,GAAG,CAACC,GAAG,CAAEC,IAAI,KAAM;MACjB,GAAGA,IAAI;MACP/B,MAAM,EAAE,QAAQ;MAChBqC,KAAK,EAAE;QAAEC,UAAU,EAAEjC,YAAY,CAAC,QAAQ,CAAC;QAAEkC,KAAK,EAAE;MAAO;IAC7D,CAAC,CAAC,CACJ,CAAC;IACDpB,OAAO,CAAEqB,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAE;MAAE9C,IAAI,EAAE,SAAS;MAAEkD,OAAO,EAAE;IAA4B,CAAC,CAAC,CAAC;EACjG,CAAC;EAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5BhC,QAAQ,CAAEgB,GAAG,IACXA,GAAG,CAACC,GAAG,CAAEC,IAAI,KAAM;MACjB,GAAGA,IAAI;MACP/B,MAAM,EAAE,SAAS;MACjBqC,KAAK,EAAE;QAAEC,UAAU,EAAEjC,YAAY,CAAC,SAAS,CAAC;QAAEkC,KAAK,EAAE;MAAO;IAC9D,CAAC,CAAC,CACJ,CAAC;IACDE,WAAW,CAAC,CAAC;EACf,CAAC;;EAED;EACA,MAAMK,OAAO,GAAIlD,KAAK,IAAK;IACzB,IAAI,CAACA,KAAK,EAAE;;IAEZ;IACA,MAAMmD,SAAS,GAAG,CAACnC,KAAK,CAACoC,MAAM,GAAG,CAAC,EAAEC,QAAQ,CAAC,CAAC;;IAE/C;IACA,MAAMC,OAAO,GAAG;MACdzD,EAAE,EAAEsD,SAAS;MACbpD,IAAI,EAAE;QAAEC;MAAM,CAAC;MACfC,QAAQ,EAAE;QAAEC,CAAC,EAAEqD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;QAAErD,CAAC,EAAEoD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG;MAAI,CAAC;MAC5DpD,MAAM,EAAE,SAAS;MAAG;MACpBqC,KAAK,EAAE;QAAEC,UAAU,EAAEjC,YAAY,CAAC,SAAS,CAAC;QAAEkC,KAAK,EAAE;MAAO,CAAC,CAAG;IAClE,CAAC;;IAED;IACA,IAAI3B,KAAK,CAACoC,MAAM,GAAG,CAAC,EAAE;MACpB,MAAMK,UAAU,GAAGzC,KAAK,CAACA,KAAK,CAACoC,MAAM,GAAG,CAAC,CAAC,CAACvD,EAAE,CAAC,CAAE;MAChD,MAAM6D,OAAO,GAAG;QACd7D,EAAE,EAAE,IAAI4D,UAAU,IAAIN,SAAS,EAAE;QAAG;QACpC7C,MAAM,EAAEmD,UAAU;QAAG;QACrBlD,MAAM,EAAE4C,SAAS;QAAI;QACrB3C,QAAQ,EAAE,IAAI,CAAO;MACvB,CAAC;MACDY,QAAQ,CAAEuC,GAAG,IAAK,CAAC,GAAGA,GAAG,EAAED,OAAO,CAAC,CAAC,CAAC,CAAE;IACzC;;IAEA;IACAzC,QAAQ,CAAEgB,GAAG,IAAK,CAAC,GAAGA,GAAG,EAAEqB,OAAO,CAAC,CAAC;IACpC/B,OAAO,CAAEqB,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAE,mBAAmB5C,KAAK,EAAE,CAAC,CAAC;IAChEyB,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;EACtB,CAAC;EAID,MAAMmC,UAAU,GAAI9D,IAAI,IAAK;IAC3B+B,eAAe,CAACP,IAAI,CAACuC,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAAChE,IAAI,KAAKA,IAAI,CAAC,CAAC;EAC1D,CAAC;EAED,MAAMiE,WAAW,GAAGA,CAACC,KAAK,EAAE7B,IAAI,KAAK;IACnCR,cAAc,CAACQ,IAAI,CAAC;EACtB,CAAC;;EAED;EACA,MAAM8B,SAAS,GAAIC,MAAM,IAAK;IAC5B9C,QAAQ,CAAEuC,GAAG,IAAKpE,OAAO,CAAC2E,MAAM,EAAEP,GAAG,CAAC,CAAC;IACvCpC,OAAO,CAAEqB,QAAQ,IAAK,CACpB,GAAGA,QAAQ,EACX;MAAE9C,IAAI,EAAE,MAAM;MAAEkD,OAAO,EAAE,aAAakB,MAAM,CAAC5D,MAAM,OAAO4D,MAAM,CAAC3D,MAAM;IAAG,CAAC,CAC5E,CAAC;EACJ,CAAC;EAED,oBACEZ,OAAA;IAAK8C,KAAK,EAAE;MAAE0B,eAAe,EAAE,SAAS;MAAEC,SAAS,EAAE,OAAO;MAAEC,OAAO,EAAE,MAAM;MAAE1B,KAAK,EAAE;IAAU,CAAE;IAAA2B,QAAA,gBAChG3E,OAAA;MAAI8C,KAAK,EAAE;QAAE8B,SAAS,EAAE,QAAQ;QAAE5B,KAAK,EAAE;MAAU,CAAE;MAAA2B,QAAA,EAAC;IAAc;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEzEhF,OAAA;MAAK8C,KAAK,EAAE;QAAE8B,SAAS,EAAE,QAAQ;QAAEK,YAAY,EAAE;MAAO,CAAE;MAAAN,QAAA,gBACxD3E,OAAA;QAAQkF,OAAO,EAAEhC,WAAY;QAACJ,KAAK,EAAE;UAAEqC,MAAM,EAAE,KAAK;UAAET,OAAO,EAAE,MAAM;UAAEF,eAAe,EAAE,SAAS;UAAExB,KAAK,EAAE;QAAO,CAAE;QAAA2B,QAAA,EAAC;MAAG;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAChIhF,OAAA;QAAQkF,OAAO,EAAE9B,YAAa;QAACN,KAAK,EAAE;UAAEqC,MAAM,EAAE,KAAK;UAAET,OAAO,EAAE,MAAM;UAAEF,eAAe,EAAE,SAAS;UAAExB,KAAK,EAAE;QAAO,CAAE;QAAA2B,QAAA,EAAC;MAAI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAClIhF,OAAA;QAAQkF,OAAO,EAAE5B,eAAgB;QAACR,KAAK,EAAE;UAAEqC,MAAM,EAAE,KAAK;UAAET,OAAO,EAAE,MAAM;UAAEF,eAAe,EAAE,SAAS;UAAExB,KAAK,EAAE;QAAO,CAAE;QAAA2B,QAAA,EAAC;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrI,CAAC,eAGNhF,OAAA;MAAK8C,KAAK,EAAE;QAAE8B,SAAS,EAAE,QAAQ;QAAEK,YAAY,EAAE;MAAO,CAAE;MAAAN,QAAA,gBACxD3E,OAAA;QACEG,IAAI,EAAC,MAAM;QACXiF,WAAW,EAAC,WAAW;QACvBC,KAAK,EAAExD,WAAY;QACnByD,QAAQ,EAAGC,CAAC,IAAKzD,cAAc,CAACyD,CAAC,CAAC3E,MAAM,CAACyE,KAAK,CAAE;QAChDvC,KAAK,EAAE;UACL4B,OAAO,EAAE,KAAK;UACdc,WAAW,EAAE,MAAM;UACnBC,MAAM,EAAE,mBAAmB;UAC3BjB,eAAe,EAAE,SAAS;UAC1BxB,KAAK,EAAE;QACT;MAAE;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACFhF,OAAA;QACEkF,OAAO,EAAEA,CAAA,KAAM3B,OAAO,CAAC1B,WAAW,CAAE;QACpCiB,KAAK,EAAE;UACL4B,OAAO,EAAE,UAAU;UACnBF,eAAe,EAAE,SAAS;UAC1BxB,KAAK,EAAE,SAAS;UAChByC,MAAM,EAAE,MAAM;UACdC,YAAY,EAAE,KAAK;UACnBC,MAAM,EAAE;QACV,CAAE;QAAAhB,QAAA,EACH;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAENhF,OAAA;MAAK8C,KAAK,EAAE;QAAE8C,MAAM,EAAE,OAAO;QAAEC,KAAK,EAAE,OAAO;QAAEJ,MAAM,EAAE,mBAAmB;QAAEN,MAAM,EAAE;MAAO,CAAE;MAAAR,QAAA,eAC3F3E,OAAA,CAACR,SAAS;QACR6B,KAAK,EAAEA,KAAM;QACbG,KAAK,EAAEA,KAAM;QACbD,aAAa,EAAEA,aAAc;QAC7BG,aAAa,EAAEA,aAAc;QAC7B0C,WAAW,EAAEA,WAAY;QACzBE,SAAS,EAAEA,SAAU,CAAE;QAAA;QACvBwB,OAAO;QAAAnB,QAAA,gBAEP3E,OAAA,CAACP,OAAO;UAAAoF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACXhF,OAAA,CAACN,QAAQ;UAAAmF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACZhF,OAAA,CAACL,UAAU;UAACqD,KAAK,EAAC,MAAM;UAAC+C,GAAG,EAAE;QAAG;UAAAlB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,EAGLjD,WAAW,iBAChB/B,OAAA;MAAK8C,KAAK,EAAE;QAAE4B,OAAO,EAAE,MAAM;QAAES,MAAM,EAAE,WAAW;QAAEM,MAAM,EAAE,mBAAmB;QAAEjB,eAAe,EAAE,SAAS;QAAEqB,KAAK,EAAE;MAAQ,CAAE;MAAAlB,QAAA,gBAC5H3E,OAAA;QAAA2E,QAAA,EAAI;MAAY;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrBhF,OAAA;QAAA2E,QAAA,gBAAG3E,OAAA;UAAA2E,QAAA,EAAQ;QAAK;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACjD,WAAW,CAAC3B,IAAI,CAACC,KAAK;MAAA;QAAAwE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtDhF,OAAA;QAAA2E,QAAA,gBAAG3E,OAAA;UAAA2E,QAAA,EAAQ;QAAO;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACjD,WAAW,CAACtB,MAAM;MAAA;QAAAoE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpDhF,OAAA;QAAA2E,QAAA,gBAAG3E,OAAA;UAAA2E,QAAA,EAAQ;QAAW;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACjD,WAAW,CAAC3B,IAAI,CAACwC,SAAS,IAAI,KAAK;MAAA;QAAAiC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzEhF,OAAA;QAAA2E,QAAA,gBAAG3E,OAAA;UAAA2E,QAAA,EAAQ;QAAS;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACjD,WAAW,CAAC3B,IAAI,CAACyC,OAAO,IAAI,KAAK;MAAA;QAAAgC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClE,CACN,eAIKhF,OAAA;MAAK8C,KAAK,EAAE;QAAE4B,OAAO,EAAE,MAAM;QAAES,MAAM,EAAE,WAAW;QAAEM,MAAM,EAAE,mBAAmB;QAAEjB,eAAe,EAAE,SAAS;QAAEqB,KAAK,EAAE;MAAQ,CAAE;MAAAlB,QAAA,gBAC5H3E,OAAA;QAAA2E,QAAA,EAAI;MAAI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACbhF,OAAA;QAAA2E,QAAA,EACGxC,QAAQ,CAACI,GAAG,CAAEpC,IAAI,iBACjBH,OAAA;UAAmBkF,OAAO,EAAEA,CAAA,KAAMjB,UAAU,CAAC9D,IAAI,CAAE;UAAC2C,KAAK,EAAE;YAAEqC,MAAM,EAAE,KAAK;YAAET,OAAO,EAAE,KAAK;YAAEF,eAAe,EAAE,SAAS;YAAExB,KAAK,EAAE;UAAU,CAAE;UAAA2B,QAAA,EACxIxE;QAAI,GADMA,IAAI;UAAA0E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAET,CACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNhF,OAAA;QAAK8C,KAAK,EAAE;UAAEkD,SAAS,EAAE,OAAO;UAAEC,SAAS,EAAE;QAAO,CAAE;QAAAtB,QAAA,EACnD1C,YAAY,CAACM,GAAG,CAAC,CAAC4B,GAAG,EAAE+B,KAAK,kBAC3BlG,OAAA;UAAe8C,KAAK,EAAE;YAAEqC,MAAM,EAAE;UAAQ,CAAE;UAAAR,QAAA,GAAC,GACxC,EAACR,GAAG,CAAChE,IAAI,CAACgG,WAAW,CAAC,CAAC,EAAC,IAAE,EAAChC,GAAG,CAACd,OAAO;QAAA,GADjC6C,KAAK;UAAArB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACJ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC5D,EAAA,CAlOID,QAAQ;EAAA,QAC6BtB,aAAa,EACbC,aAAa;AAAA;AAAAsG,EAAA,GAFlDjF,QAAQ;AAoOd,eAAeA,QAAQ;AAAC,IAAAiF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}