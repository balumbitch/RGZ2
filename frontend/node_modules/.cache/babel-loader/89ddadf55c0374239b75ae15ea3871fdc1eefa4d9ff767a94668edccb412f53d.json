{"ast":null,"code":"var _jsxFileName = \"/home/kaldheim/django_ci_cd/frontend/src/components/Pipeline.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background, addEdge, useNodesState, useEdgesState } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport './Pipeline.css'; // Подключение CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: '1',\n  type: 'input',\n  data: {\n    label: 'Build'\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  status: 'Pending'\n}, {\n  id: '2',\n  data: {\n    label: 'Test'\n  },\n  position: {\n    x: 100,\n    y: 150\n  },\n  status: 'Pending'\n}, {\n  id: '3',\n  data: {\n    label: 'Deploy'\n  },\n  position: {\n    x: 400,\n    y: 150\n  },\n  status: 'Pending'\n}];\nconst initialEdges = [{\n  id: 'e1-2',\n  source: '1',\n  target: '2',\n  animated: true\n}, {\n  id: 'e1-3',\n  source: '1',\n  target: '3',\n  animated: true\n}];\nconst Pipeline = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [logs, setLogs] = useState([]);\n  const [newTaskName, setNewTaskName] = useState('');\n  const updateNodeStatus = (nodeId, status) => {\n    setNodes(nds => nds.map(node => node.id === nodeId ? {\n      ...node,\n      status,\n      style: {\n        background: '#4caf50',\n        color: '#fff'\n      }\n    } : node));\n    setLogs(prevLogs => [...prevLogs, `Task ${nodeId} status updated to ${status}`]);\n  };\n  const runPipeline = () => {\n    updateNodeStatus('1', 'Running');\n    setTimeout(() => updateNodeStatus('1', 'Completed'), 2000);\n    setTimeout(() => updateNodeStatus('2', 'Running'), 4000);\n    setTimeout(() => updateNodeStatus('2', 'Completed'), 6000);\n    setTimeout(() => updateNodeStatus('3', 'Running'), 8000);\n    setTimeout(() => updateNodeStatus('3', 'Completed'), 10000);\n  };\n  const addNode = label => {\n    if (!label) return;\n    const newNode = {\n      id: `${nodes.length + 1}`,\n      data: {\n        label\n      },\n      position: {\n        x: Math.random() * 600,\n        y: Math.random() * 400\n      }\n    };\n    setNodes(nds => [...nds, newNode]);\n    setLogs(prevLogs => [...prevLogs, `Added new task: ${label}`]);\n  };\n  const onConnect = params => {\n    setEdges(eds => addEdge({\n      ...params,\n      animated: true\n    }, eds));\n    setLogs(prevLogs => [...prevLogs, `Connected ${params.source} -> ${params.target}`]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pipeline-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"pipeline-header\",\n      children: \"CI/CD Pipeline\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"pipeline-button\",\n        onClick: runPipeline,\n        children: \"Run Pipeline\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"pipeline-input\",\n        placeholder: \"Add Task\",\n        value: newTaskName,\n        onChange: e => setNewTaskName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"pipeline-button\",\n        onClick: () => addNode(newTaskName),\n        children: \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reactflow-container\",\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {\n          gap: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pipeline-task-logs\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Logs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), logs.map((log, idx) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: log\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(Pipeline, \"GIAqIMVXQl2E6t2kqdzl+zg3c0Q=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = Pipeline;\nexport default Pipeline;\nvar _c;\n$RefreshReg$(_c, \"Pipeline\");","map":{"version":3,"names":["React","useState","ReactFlow","MiniMap","Controls","Background","addEdge","useNodesState","useEdgesState","jsxDEV","_jsxDEV","initialNodes","id","type","data","label","position","x","y","status","initialEdges","source","target","animated","Pipeline","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","logs","setLogs","newTaskName","setNewTaskName","updateNodeStatus","nodeId","nds","map","node","style","background","color","prevLogs","runPipeline","setTimeout","addNode","newNode","length","Math","random","onConnect","params","eds","className","children","fileName","_jsxFileName","lineNumber","columnNumber","textAlign","marginBottom","onClick","placeholder","value","onChange","e","fitView","gap","log","idx","_c","$RefreshReg$"],"sources":["/home/kaldheim/django_ci_cd/frontend/src/components/Pipeline.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  addEdge,\n  useNodesState,\n  useEdgesState,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport './Pipeline.css'; // Подключение CSS\n\nconst initialNodes = [\n  { id: '1', type: 'input', data: { label: 'Build' }, position: { x: 250, y: 0 }, status: 'Pending' },\n  { id: '2', data: { label: 'Test' }, position: { x: 100, y: 150 }, status: 'Pending' },\n  { id: '3', data: { label: 'Deploy' }, position: { x: 400, y: 150 }, status: 'Pending' },\n];\n\nconst initialEdges = [\n  { id: 'e1-2', source: '1', target: '2', animated: true },\n  { id: 'e1-3', source: '1', target: '3', animated: true },\n];\n\nconst Pipeline = () => {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [logs, setLogs] = useState([]);\n  const [newTaskName, setNewTaskName] = useState('');\n\n  const updateNodeStatus = (nodeId, status) => {\n    setNodes((nds) =>\n      nds.map((node) =>\n        node.id === nodeId\n          ? { ...node, status, style: { background: '#4caf50', color: '#fff' } }\n          : node\n      )\n    );\n    setLogs((prevLogs) => [...prevLogs, `Task ${nodeId} status updated to ${status}`]);\n  };\n\n  const runPipeline = () => {\n    updateNodeStatus('1', 'Running');\n    setTimeout(() => updateNodeStatus('1', 'Completed'), 2000);\n    setTimeout(() => updateNodeStatus('2', 'Running'), 4000);\n    setTimeout(() => updateNodeStatus('2', 'Completed'), 6000);\n    setTimeout(() => updateNodeStatus('3', 'Running'), 8000);\n    setTimeout(() => updateNodeStatus('3', 'Completed'), 10000);\n  };\n\n  const addNode = (label) => {\n    if (!label) return;\n    const newNode = {\n      id: `${nodes.length + 1}`,\n      data: { label },\n      position: { x: Math.random() * 600, y: Math.random() * 400 },\n    };\n    setNodes((nds) => [...nds, newNode]);\n    setLogs((prevLogs) => [...prevLogs, `Added new task: ${label}`]);\n  };\n\n  const onConnect = (params) => {\n    setEdges((eds) => addEdge({ ...params, animated: true }, eds));\n    setLogs((prevLogs) => [...prevLogs, `Connected ${params.source} -> ${params.target}`]);\n  };\n\n  return (\n    <div className=\"pipeline-container\">\n      <h2 className=\"pipeline-header\">CI/CD Pipeline</h2>\n      <div style={{ textAlign: 'center', marginBottom: '20px' }}>\n        <button className=\"pipeline-button\" onClick={runPipeline}>\n          Run Pipeline\n        </button>\n        <input\n          className=\"pipeline-input\"\n          placeholder=\"Add Task\"\n          value={newTaskName}\n          onChange={(e) => setNewTaskName(e.target.value)}\n        />\n        <button className=\"pipeline-button\" onClick={() => addNode(newTaskName)}>\n          Add Task\n        </button>\n      </div>\n      <div className=\"reactflow-container\">\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          fitView\n        >\n          <MiniMap />\n          <Controls />\n          <Background gap={16} />\n        </ReactFlow>\n      </div>\n      <div className=\"pipeline-task-logs\">\n        <h4>Logs</h4>\n        {logs.map((log, idx) => (\n          <p key={idx}>{log}</p>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Pipeline;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}