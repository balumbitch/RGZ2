{"ast":null,"code":"var _jsxFileName = \"/home/student/rgz2/frontend/src/components/Pipeline.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport './Pipeline.css'; // Подключаем CSS-файл\n\n// Исходные данные\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: '1',\n  type: 'input',\n  data: {\n    label: 'Build',\n    startTime: null,\n    endTime: null\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  status: 'Pending'\n}, {\n  id: '2',\n  data: {\n    label: 'Test',\n    startTime: null,\n    endTime: null\n  },\n  position: {\n    x: 100,\n    y: 150\n  },\n  status: 'Pending'\n}, {\n  id: '3',\n  data: {\n    label: 'Deploy',\n    startTime: null,\n    endTime: null\n  },\n  position: {\n    x: 400,\n    y: 150\n  },\n  status: 'Pending'\n}];\nconst initialEdges = [{\n  id: 'e1-2',\n  source: '1',\n  target: '2',\n  animated: true\n}, {\n  id: 'e1-3',\n  source: '1',\n  target: '3',\n  animated: true\n}];\nconst statusColors = {\n  Pending: '#ffcc80',\n  // Светло-оранжевый\n  Running: '#80deea',\n  // Голубой\n  Completed: '#a5d6a7',\n  // Светло-зеленый\n  Failed: '#ef9a9a' // Светло-красный\n};\nconst Pipeline = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [logs, setLogs] = useState([]);\n  const [newTaskName, setNewTaskName] = useState('');\n  const [taskDetails, setTaskDetails] = useState(null);\n\n  // Обновление статуса задачи и времени\n  const updateNodeStatus = (nodeId, status) => {\n    setNodes(nds => nds.map(node => {\n      if (node.id === nodeId) {\n        const currentTime = new Date().toLocaleTimeString();\n        return {\n          ...node,\n          status,\n          style: {\n            background: statusColors[status],\n            color: '#000'\n          },\n          data: {\n            ...node.data,\n            startTime: status === 'Running' ? currentTime : node.data.startTime,\n            endTime: status === 'Completed' ? currentTime : node.data.endTime\n          }\n        };\n      }\n      return node;\n    }));\n    setLogs(prevLogs => [...prevLogs, `Task ${nodeId} status updated to ${status}`]);\n  };\n\n  // Запуск пайплайна\n  const runPipeline = () => {\n    let delay = 0;\n    nodes.forEach(node => {\n      setTimeout(() => updateNodeStatus(node.id, 'Running'), delay);\n      delay += 2000;\n      setTimeout(() => updateNodeStatus(node.id, 'Completed'), delay);\n      delay += 2000;\n    });\n  };\n\n  // Остановка всех задач\n  const stopPipeline = () => {\n    setNodes(nds => nds.map(node => ({\n      ...node,\n      status: 'Failed',\n      style: {\n        background: statusColors['Failed'],\n        color: '#000'\n      }\n    })));\n    setLogs(prevLogs => [...prevLogs, 'Pipeline stopped manually']);\n  };\n\n  // Перезапуск всех задач\n  const restartPipeline = () => {\n    setNodes(nds => nds.map(node => ({\n      ...node,\n      status: 'Pending',\n      style: {\n        background: statusColors['Pending'],\n        color: '#000'\n      },\n      data: {\n        ...node.data,\n        startTime: null,\n        endTime: null\n      }\n    })));\n    runPipeline();\n  };\n\n  // Добавление новой задачи\n  const addNode = label => {\n    if (!label) return;\n    const newNodeId = (nodes.length + 1).toString();\n    const newNode = {\n      id: newNodeId,\n      data: {\n        label,\n        startTime: null,\n        endTime: null\n      },\n      position: {\n        x: Math.random() * 600,\n        y: Math.random() * 400\n      },\n      status: 'Pending',\n      style: {\n        background: statusColors['Pending'],\n        color: '#000'\n      }\n    };\n    const lastNodeId = nodes[nodes.length - 1].id;\n    const newEdge = {\n      id: `e${lastNodeId}-${newNodeId}`,\n      source: lastNodeId,\n      target: newNodeId,\n      animated: true\n    };\n    setNodes(nds => [...nds, newNode]);\n    setEdges(eds => [...eds, newEdge]);\n    setLogs(prevLogs => [...prevLogs, `Added new task: ${label}`]);\n    setNewTaskName('');\n  };\n\n  // Обработка клика на узле\n  const onNodeClick = (event, node) => {\n    setTaskDetails(node);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pipeline-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"pipeline-header\",\n      children: \"CI/CD Pipeline\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"pipeline-button\",\n        onClick: runPipeline,\n        children: \"Run\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"pipeline-button\",\n        onClick: stopPipeline,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"pipeline-button\",\n        onClick: restartPipeline,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Task Name\",\n        value: newTaskName,\n        onChange: e => setNewTaskName(e.target.value),\n        className: \"pipeline-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"pipeline-button\",\n        onClick: () => addNode(newTaskName),\n        children: \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reactflow-container\",\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onNodeClick: onNodeClick,\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {\n          color: \"#9ccc65\",\n          gap: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), taskDetails && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pipeline-task\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Task Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 14\n        }, this), \" \", taskDetails.data.label]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Status:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 14\n        }, this), \" \", taskDetails.status]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Start Time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 14\n        }, this), \" \", taskDetails.data.startTime || 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"End Time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 14\n        }, this), \" \", taskDetails.data.endTime || 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pipeline-task-logs\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Logs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          maxHeight: '150px',\n          overflowY: 'auto'\n        },\n        children: logs.map((log, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            margin: '5px 0'\n          },\n          children: log\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s(Pipeline, \"KeThdUoXgeVuOLrNniPb9vl6wfY=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = Pipeline;\nexport default Pipeline;\nvar _c;\n$RefreshReg$(_c, \"Pipeline\");","map":{"version":3,"names":["React","useState","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","jsxDEV","_jsxDEV","initialNodes","id","type","data","label","startTime","endTime","position","x","y","status","initialEdges","source","target","animated","statusColors","Pending","Running","Completed","Failed","Pipeline","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","logs","setLogs","newTaskName","setNewTaskName","taskDetails","setTaskDetails","updateNodeStatus","nodeId","nds","map","node","currentTime","Date","toLocaleTimeString","style","background","color","prevLogs","runPipeline","delay","forEach","setTimeout","stopPipeline","restartPipeline","addNode","newNodeId","length","toString","newNode","Math","random","lastNodeId","newEdge","eds","onNodeClick","event","className","children","fileName","_jsxFileName","lineNumber","columnNumber","display","justifyContent","marginBottom","onClick","placeholder","value","onChange","e","fitView","gap","maxHeight","overflowY","log","index","margin","_c","$RefreshReg$"],"sources":["/home/student/rgz2/frontend/src/components/Pipeline.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport './Pipeline.css'; // Подключаем CSS-файл\n\n// Исходные данные\nconst initialNodes = [\n  {\n    id: '1',\n    type: 'input',\n    data: { label: 'Build', startTime: null, endTime: null },\n    position: { x: 250, y: 0 },\n    status: 'Pending',\n  },\n  {\n    id: '2',\n    data: { label: 'Test', startTime: null, endTime: null },\n    position: { x: 100, y: 150 },\n    status: 'Pending',\n  },\n  {\n    id: '3',\n    data: { label: 'Deploy', startTime: null, endTime: null },\n    position: { x: 400, y: 150 },\n    status: 'Pending',\n  },\n];\n\nconst initialEdges = [\n  { id: 'e1-2', source: '1', target: '2', animated: true },\n  { id: 'e1-3', source: '1', target: '3', animated: true },\n];\n\nconst statusColors = {\n  Pending: '#ffcc80', // Светло-оранжевый\n  Running: '#80deea', // Голубой\n  Completed: '#a5d6a7', // Светло-зеленый\n  Failed: '#ef9a9a', // Светло-красный\n};\n\nconst Pipeline = () => {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [logs, setLogs] = useState([]);\n  const [newTaskName, setNewTaskName] = useState('');\n  const [taskDetails, setTaskDetails] = useState(null);\n\n  // Обновление статуса задачи и времени\n  const updateNodeStatus = (nodeId, status) => {\n    setNodes((nds) =>\n      nds.map((node) => {\n        if (node.id === nodeId) {\n          const currentTime = new Date().toLocaleTimeString();\n          return {\n            ...node,\n            status,\n            style: { background: statusColors[status], color: '#000' },\n            data: {\n              ...node.data,\n              startTime: status === 'Running' ? currentTime : node.data.startTime,\n              endTime: status === 'Completed' ? currentTime : node.data.endTime,\n            },\n          };\n        }\n        return node;\n      })\n    );\n    setLogs((prevLogs) => [...prevLogs, `Task ${nodeId} status updated to ${status}`]);\n  };\n\n  // Запуск пайплайна\n  const runPipeline = () => {\n    let delay = 0;\n    nodes.forEach((node) => {\n      setTimeout(() => updateNodeStatus(node.id, 'Running'), delay);\n      delay += 2000;\n      setTimeout(() => updateNodeStatus(node.id, 'Completed'), delay);\n      delay += 2000;\n    });\n  };\n\n  // Остановка всех задач\n  const stopPipeline = () => {\n    setNodes((nds) =>\n      nds.map((node) => ({\n        ...node,\n        status: 'Failed',\n        style: { background: statusColors['Failed'], color: '#000' },\n      }))\n    );\n    setLogs((prevLogs) => [...prevLogs, 'Pipeline stopped manually']);\n  };\n\n  // Перезапуск всех задач\n  const restartPipeline = () => {\n    setNodes((nds) =>\n      nds.map((node) => ({\n        ...node,\n        status: 'Pending',\n        style: { background: statusColors['Pending'], color: '#000' },\n        data: { ...node.data, startTime: null, endTime: null },\n      }))\n    );\n    runPipeline();\n  };\n\n  // Добавление новой задачи\n  const addNode = (label) => {\n    if (!label) return;\n    const newNodeId = (nodes.length + 1).toString();\n    const newNode = {\n      id: newNodeId,\n      data: { label, startTime: null, endTime: null },\n      position: { x: Math.random() * 600, y: Math.random() * 400 },\n      status: 'Pending',\n      style: { background: statusColors['Pending'], color: '#000' },\n    };\n    const lastNodeId = nodes[nodes.length - 1].id;\n    const newEdge = {\n      id: `e${lastNodeId}-${newNodeId}`,\n      source: lastNodeId,\n      target: newNodeId,\n      animated: true,\n    };\n    setNodes((nds) => [...nds, newNode]);\n    setEdges((eds) => [...eds, newEdge]);\n    setLogs((prevLogs) => [...prevLogs, `Added new task: ${label}`]);\n    setNewTaskName('');\n  };\n\n  // Обработка клика на узле\n  const onNodeClick = (event, node) => {\n    setTaskDetails(node);\n  };\n\n  return (\n    <div className=\"pipeline-container\">\n      <h2 className=\"pipeline-header\">CI/CD Pipeline</h2>\n\n      <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '20px' }}>\n        <button className=\"pipeline-button\" onClick={runPipeline}>\n          Run\n        </button>\n        <button className=\"pipeline-button\" onClick={stopPipeline}>\n          Stop\n        </button>\n        <button className=\"pipeline-button\" onClick={restartPipeline}>\n          Restart\n        </button>\n      </div>\n\n      <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '20px' }}>\n        <input\n          type=\"text\"\n          placeholder=\"Task Name\"\n          value={newTaskName}\n          onChange={(e) => setNewTaskName(e.target.value)}\n          className=\"pipeline-input\"\n        />\n        <button className=\"pipeline-button\" onClick={() => addNode(newTaskName)}>\n          Add Task\n        </button>\n      </div>\n\n      <div className=\"reactflow-container\">\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onNodeClick={onNodeClick}\n          fitView\n        >\n          <MiniMap />\n          <Controls />\n          <Background color=\"#9ccc65\" gap={16} />\n        </ReactFlow>\n      </div>\n\n      {taskDetails && (\n        <div className=\"pipeline-task\">\n          <h4>Task Details</h4>\n          <p><strong>Name:</strong> {taskDetails.data.label}</p>\n          <p><strong>Status:</strong> {taskDetails.status}</p>\n          <p><strong>Start Time:</strong> {taskDetails.data.startTime || 'N/A'}</p>\n          <p><strong>End Time:</strong> {taskDetails.data.endTime || 'N/A'}</p>\n        </div>\n      )}\n\n      <div className=\"pipeline-task-logs\">\n        <h4>Logs</h4>\n        <div style={{ maxHeight: '150px', overflowY: 'auto' }}>\n          {logs.map((log, index) => (\n            <p key={index} style={{ margin: '5px 0' }}>\n              {log}\n            </p>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Pipeline;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}